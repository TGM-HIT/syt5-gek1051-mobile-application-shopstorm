{"version":3,"sources":["components/ShoppingLists.js","components/ShoppingList.js","App.js","registerServiceWorker.js","index.js"],"names":["iconButtonElement","React","createElement","IconButton","touch","tooltip","tooltipPosition","MoreVertIcon","ShoppingLists","Component","constructor","arguments","state","open","activeListId","oldName","newName","handleOpen","listid","listtitle","this","setState","handleClose","handleSubmit","e","props","renameListFunc","updateName","target","value","render","actions","FlatButton","label","primary","onClick","keyboardFocused","listItems","shoppingLists","map","list","Card","key","_id","style","margin","CardTitle","title","children","IconMenu","className","MenuItem","primaryText","openListFunc","deleteListFunc","CardActions","Checkbox","checkedCounts","get","totalCounts","checked","onCheck","checkAllFunc","Dialog","modal","onRequestClose","TextField","type","id","defaultValue","onChange","fullWidth","moveVertButton","ShoppingList","activeItemId","itemid","itemtitle","renameItemFunc","items","shoppingListItems","item","ListItem","leftCheckbox","toggleItemCheckFunc","data-item","data-id","rightIconButton","deleteFunc","Divider","inset","muiTheme","getMuiTheme","palette","textColor","grey800","alternateTextColor","white","primary1Color","pinkA100","accent1Color","blueGrey500","appBarStyle","backgroundColor","width","App","super","componentDidMount","getShoppingLists","remoteDB","syncToRemote","localDB","sync","live","retry","on","change","getPouchDocs","err","console","log","checkedCount","List","totalCount","lists","shoppingListRepository","find","then","foundLists","size","findItemsCountByList","countsList","selector","fields","checkedList","view","shoppingList","checkedTotalShoppingListItemCount","totalShoppingListItemCount","openShoppingList","getShoppingListItems","findItems","refreshShoppingListItems","renameShoppingListItem","newname","getItem","set","putItem","deleteShoppingListItem","deleteItem","toggleItemCheck","evt","dataset","checkAllListItems","listcheck","newitems","forEach","push","mergeDeep","length","listOfShoppingListItems","shoppingListFactory","newListOfShoppingListItems","putItemsBulk","newitemsresponse","put","deleteShoppingList","result","renameShoppingList","createNewShoppingListOrItem","preventDefault","adding","newShoppingList","newShoppingListItem","displayAddingUI","renderNewNameUI","onSubmit","marginTop","Paper","autoFocus","hintText","padding","underlineStyle","renderShoppingLists","renderShoppingListItems","renderBackButton","KeyboardBackspace","src","alt","renderActionButtons","iconStyle","fill","handleOpenSettings","SettingsIcon","handleOpenAbout","AboutIcon","settingsOpen","handleCloseSettings","aboutOpen","handleCloseAbout","handleSubmitSettings","PouchDB","tempdburl","ex","showSettingsDialog","floatingLabelText","showAboutDialog","handleAboutSettings","href","rel","screenname","MuiThemeProvider","AppBar","iconElementLeft","iconElementRight","FloatingActionButton","mini","position","bottom","right","ContentAdd","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","plugin","PouchDBFind","undefined","Credentials","require","default","cloudant_url","ShoppingListFactory","ShoppingListRepositoryPouchDB","URL","process","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","ensureIndexes","ReactDOM","document","getElementById","reason"],"mappings":"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","file":"static/js/main.05e93e5a.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {Card, CardActions, CardTitle} from 'material-ui/Card';\nimport Checkbox from 'material-ui/Checkbox';\nimport MenuItem from 'material-ui/MenuItem';\nimport IconMenu from 'material-ui/IconMenu';\nimport IconButton from 'material-ui/IconButton';\nimport MoreVertIcon from 'material-ui/svg-icons/navigation/more-vert';\nimport './ShoppingLists.css';\nimport Dialog from 'material-ui/Dialog';\nimport FlatButton from 'material-ui/FlatButton';\nimport TextField from 'material-ui/TextField';\n\nconst iconButtonElement = (\n    <IconButton touch={true} tooltip=\"more\" tooltipPosition=\"bottom-left\">\n        <MoreVertIcon />\n    </IconButton>\n);\n\nclass ShoppingLists extends React.Component {\n  // all state actions are for handling the renaming dialog\n  state = {\n    open: false,\n    activeListId: '', \n    oldName: '',\n    newName: ''\n  };\n\n  handleOpen = (listid, listtitle) => {\n    this.setState({open: true, activeListId: listid, oldName: listtitle});\n  };\n\n  handleClose = () => {\n    this.setState({open: false});\n  };\n\n  handleSubmit = (e) => {\n    this.props.renameListFunc(this.state.activeListId, this.state.newName);\n    this.handleClose();\n  };\n\n  updateName = (e) => {\n    this.setState({newName: e.target.value});\n  }\n\n  /**\n   * Show the UI. The most important thing happening here is that the UI elements \n   * make use of the functions passed into the component as props to do all the heavy \n   * lifting of manipulating shopping lists, so this component is pure UI.\n   */\n  render() {\n    /* rename dialog stuff */\n    const actions = [\n      <FlatButton\n        label=\"Cancel\"\n        primary={true}\n        onClick={this.handleClose}\n      />,\n      <FlatButton\n        label=\"Submit\"\n        primary={true}\n        keyboardFocused={true}\n        onClick={this.handleSubmit}\n      />,\n    ];\n    /* end rename dialog stuff */\n    \n    let listItems = this.props.shoppingLists.map( (list) => \n    <Card key={list._id} style={{margin:\"12px 0\"}}>\n      <CardTitle \n        title={list.title} \n        children={\n          <IconMenu iconButtonElement={iconButtonElement}   \n            className=\"vertmenu-list\">\n            <MenuItem \n              primaryText=\"Open\" \n              onClick={()=>this.props.openListFunc(list._id)}/>\n            <MenuItem \n              primaryText=\"Rename\"\n              onClick={()=>this.handleOpen(list._id, list.title)}/>\n            <MenuItem \n              primaryText=\"Delete\" \n              onClick={()=>this.props.deleteListFunc(list._id)}/>\n          </IconMenu>\n        } />\n      <CardActions>\n        <Checkbox label={(this.props.checkedCounts.get(list._id) || 0)+' of '+(this.props.totalCounts.get(list._id) || 0)+' items checked'}\n          checked={list.checked} \n          onCheck={()=>this.props.checkAllFunc(list._id)} />\n      </CardActions>\n    </Card>\n  )\n  return (\n    <div>\n      <div>{listItems}</div>\n      <Dialog\n        title=\"Rename Item\"\n        actions={actions}\n        modal={false}\n        open={this.state.open}\n        onRequestClose={this.handleClose}>\n          <TextField className=\"form-control\" type=\"text\" id=\"textfield-item-rename\"\n          defaultValue={this.state.oldName} \n          onChange={this.updateName} \n          fullWidth={true} />\n      </Dialog>\n    </div>\n  )\n  }\n}\n\nShoppingLists.propTypes = {\n    shoppingLists: PropTypes.array.isRequired, \n    deleteFunc: PropTypes.func.isRequired, \n    openListFunc: PropTypes.func.isRequired, \n    renameListFunc: PropTypes.func.isRequired\n}\n\nexport default ShoppingLists;","import React from 'react';\nimport {ListItem} from 'material-ui/List';\nimport Divider from 'material-ui/Divider';\nimport Checkbox from 'material-ui/Checkbox';\nimport MenuItem from 'material-ui/MenuItem';\nimport IconMenu from 'material-ui/IconMenu';\nimport IconButton from 'material-ui/IconButton';\nimport MoreVertIcon from 'material-ui/svg-icons/navigation/more-vert';\nimport './ShoppingList.css';\nimport Dialog from 'material-ui/Dialog';\nimport FlatButton from 'material-ui/FlatButton';\nimport TextField from 'material-ui/TextField';\n\nconst moveVertButton = (\n    <IconButton touch={true} tooltip=\"more\" tooltipPosition=\"bottom-left\">\n        <MoreVertIcon />\n    </IconButton>\n);\n\nclass ShoppingList extends React.Component {\n  /* all state actions are for handling the renaming dialog */\n  state = {\n    open: false,\n    activeItemId: '', \n    oldName: '',\n    newName: ''\n  };\n\n  handleOpen = (itemid, itemtitle) => {\n    this.setState({open: true, activeItemId: itemid, oldName: itemtitle});\n  };\n\n  handleClose = () => {\n    this.setState({open: false});\n  };\n\n  handleSubmit = (e) => {\n    this.props.renameItemFunc(this.state.activeItemId, this.state.newName);\n    this.handleClose();\n  };\n\n  updateName = (e) => {\n    this.setState({newName: e.target.value});\n  }\n\n  /**\n   * Show the UI. The most important thing happening here is that the UI elements \n   * make use of the functions passed into the component as props to do all the heavy \n   * lifting of manipulating shopping list items, so this component is pure UI.\n   */\n  render() {\n    /* rename dialog stuff */\n    const actions = [\n      <FlatButton\n        label=\"Cancel\"\n        primary={true}\n        onClick={this.handleClose}\n      />,\n      <FlatButton\n        label=\"Submit\"\n        primary={true}\n        keyboardFocused={true}\n        onClick={this.handleSubmit}\n      />,\n    ];\n    /* end rename dialog stuff */\n\n    let items = this.props.shoppingListItems.map( (item) => \n      <div key={'listitem_'+item._id}>\n      <ListItem className='shoppinglistitem'\n        primaryText={\n            <span className={(item.checked ? 'checkeditem' : 'uncheckeditem')}>{item.title}</span>} \n        leftCheckbox={\n          <Checkbox onCheck={this.props.toggleItemCheckFunc} data-item={item._id} data-id={item._id} checked={item.checked} />} \n        rightIconButton={\n          <IconMenu iconButtonElement={moveVertButton} \n            className=\"vertmenu-list\">\n            <MenuItem \n              primaryText=\"Rename\"\n              onClick={()=>this.handleOpen(item._id, item.title)} />\n            <MenuItem \n              primaryText=\"Delete\" \n              onClick={()=>this.props.deleteFunc(item._id)}/>\n          </IconMenu>\n        }>\n      </ListItem>\n      <Divider inset={true} />\n      </div>\n    );\n      \n    return (\n      <div>\n        <div>{items}</div>\n        <Dialog\n          title=\"Rename Item\"\n          actions={actions}\n          modal={false}\n          open={this.state.open}\n          onRequestClose={this.handleClose}>\n          {/* <form onSubmit={this.handleSubmit}> */}\n            <TextField className=\"form-control\" type=\"text\" id=\"textfield-item-rename\"\n              defaultValue={this.state.oldName} \n              onChange={this.updateName} \n              fullWidth={true} />\n          {/* </form> */}\n        </Dialog>\n      </div>\n    )\n  }\n}\n\nexport default ShoppingList;","import React from 'react';\nimport {List} from 'immutable';\n// We're using Material Design React components from http://www.material-ui.com\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport getMuiTheme from 'material-ui/styles/getMuiTheme';\nimport AppBar from 'material-ui/AppBar';\nimport Dialog from 'material-ui/Dialog';\nimport FlatButton from 'material-ui/FlatButton';\nimport FloatingActionButton from 'material-ui/FloatingActionButton';\nimport ContentAdd from 'material-ui/svg-icons/content/add';\nimport TextField from 'material-ui/TextField';\nimport Paper from 'material-ui/Paper';\nimport {Card, CardTitle} from 'material-ui/Card';\nimport IconButton from 'material-ui/IconButton';\nimport KeyboardBackspace from 'material-ui/svg-icons/hardware/keyboard-backspace';\nimport SettingsIcon from 'material-ui/svg-icons/action/settings';\nimport AboutIcon from 'material-ui/svg-icons/action/info-outline';\nimport {grey800, blueGrey500, pinkA100, white} from 'material-ui/styles/colors';\n\nimport PouchDB from 'pouchdb';\n\nimport ShoppingLists from './components/ShoppingLists';\nimport ShoppingList from './components/ShoppingList';\n\n// create a custom color scheme for Material-UI\nconst muiTheme = getMuiTheme({\n  palette: {\n    textColor: grey800, \n    alternateTextColor: white, \n    primary1Color: pinkA100,\n    accent1Color: blueGrey500\n  }\n});\n\nconst appBarStyle = {\n  backgroundColor: blueGrey500, \n  width: \"100%\", \n};\n\nconst NOLISTMSG = \"Click the + sign below to create a shopping list.\"\nconst NOITEMSMSG = \"Click the + sign below to create a shopping list item.\"\n\n/** \n * This is the main React application\n */\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    // manage remoteDB here because user might change it via the UI\n    // but don't put it in state because changing the backend db doesn't require a re-render\n    this.remoteDB = props.remoteDB; \n\n    this.state = {\n      shoppingList: null, \n      shoppingLists: [], \n      totalShoppingListItemCount: List(), //Immutable.js List with list ids as keys\n      checkedTotalShoppingListItemCount: List(), //Immutable.js List with list ids as keys\n      shoppingListItems: null, \n      adding: false, \n      view: 'lists',\n      newName: '',\n      settingsOpen: false,\n      aboutOpen: false\n    }\n  }\n\n  /**\n   * Before this component shows the user anything, get the data from the local PouchDB\n   * \n   * Then, if we were initialized with a remote DB, synchronize with it\n   */\n  componentDidMount = () => {\n      this.getShoppingLists();\n      if (this.remoteDB) {\n        this.syncToRemote();\n      }\n  }\n\n  /**\n   * Synchronize local PouchDB with a remote CouchDB or Cloudant\n   */\n  syncToRemote = () => {\n    this.props.localDB.sync(this.remoteDB, {live: true, retry: true})\n    .on('change', change => {\n      this.getPouchDocs();\n    })\n    // .on('paused', info => console.log('replication paused.'))\n    // .on('active', info => console.log('replication resumed.'))\n    .on('error', err => console.log('uh oh! an error occured while synching.'));\n}\n\n  /**\n   * From the local DB, load all the shopping lists and item counts and which are checked\n   */\n  getShoppingLists = () => {\n    let checkedCount = List();\n    let totalCount = List();\n    let lists = null;\n    this.props.shoppingListRepository.find().then( foundLists => {\n      console.log('GOT SHOPPING LISTS FROM POUCHDB. COUNT: '+foundLists.size);\n      lists = foundLists;\n      return foundLists;\n    }).then( foundLists => {\n      return this.props.shoppingListRepository.findItemsCountByList();\n    }).then( countsList => { \n      console.log('TOTAL COUNT LIST');\n      console.log(countsList);\n      totalCount = countsList;\n      return this.props.shoppingListRepository.findItemsCountByList({\n        selector: {\n          type: 'item', \n          checked: true\n        },\n        fields: ['list']\n      });\n    }).then( checkedList => {\n      console.log('CHECKED LIST');\n      console.log(checkedList);\n      checkedCount = checkedList;\n      this.setState({\n        view: 'lists', \n        shoppingLists: lists, \n        shoppingList: null,\n        shoppingListItems: null, \n        checkedTotalShoppingListItemCount: checkedCount, \n        totalShoppingListItemCount: totalCount\n      });\n    });\n  }\n\n  /**\n   * Get a shopping list by id \n   * @param {string} listid id of a shopping list\n   */\n  openShoppingList = (listid) => {\n    this.props.shoppingListRepository.get(listid).then( list => {\n      return list;\n    }).then(list => {\n      this.getShoppingListItems(listid).then(items => {\n        this.setState({\n          view: 'items', \n          shoppingList: list,\n          shoppingListItems: items\n        });\n      });\n    });\n  }\n\n  /**\n   * Get the items in a shopping list\n   * @param {string} listid id of a shopping list\n   */\n  getShoppingListItems = (listid) => {\n    return this.props.shoppingListRepository.findItems({\n      selector: {\n        type: 'item', \n        list: listid\n      }\n    });\n  }\n\n  /**\n   * Refresh the items in a shopping list\n   * @param {string} listid id of a shopping list\n   */\n  refreshShoppingListItems = (listid) => {\n    this.props.shoppingListRepository.findItems({\n      selector: {\n        type: 'item', \n        list: listid\n      }\n    }).then(items => {\n      this.setState({\n        view: 'items', \n        shoppingListItems: items\n      });\n    });\n  }\n\n  /**\n   * Change the name of an item\n   * @param {string} itemid id of an item\n   * @param {string} newname new name of the item\n   */\n  renameShoppingListItem = (itemid, newname) => {\n    console.log('IN renameShoppingListItem with id='+itemid+', name='+newname);\n    this.props.shoppingListRepository.getItem(itemid).then(item => {\n      item = item.set('title', newname);\n      return this.props.shoppingListRepository.putItem(item);\n    }).then(this.refreshShoppingListItems(this.state.shoppingList._id));\n  }\n\n  /**\n   * Delete an item\n   * @param {string} itemid id of an item\n   */\n  deleteShoppingListItem = (itemid) => {\n    this.props.shoppingListRepository.getItem(itemid).then(item => {\n      return this.props.shoppingListRepository.deleteItem(item);\n    }).then(this.refreshShoppingListItems(this.state.shoppingList._id));\n  }\n\n  /**\n   * Check off or un-check an item\n   * @param {event} evt The click event on the UI element requesting to toggle state. It's id is the item id\n   */\n  toggleItemCheck = (evt) => {\n    let itemid = evt.target.dataset.id;\n    this.props.shoppingListRepository.getItem(itemid).then(item => {\n      item = item.set('checked', !item.checked);\n      return this.props.shoppingListRepository.putItem(item);\n    }).then(this.refreshShoppingListItems(this.state.shoppingList._id));\n  }\n\n  /**\n   * Check off all items in the shopping list\n   * @param {string} listid id of a shopping list\n   */\n  checkAllListItems = (listid) => {\n    let listcheck = true;\n    this.getShoppingListItems(listid).then( items => {\n      let newitems = [];\n      items.forEach(item => {\n        if (!item.checked) {\n          newitems.push( item.mergeDeep({checked:true}) );\n        }\n      }, this);\n      // if all items were already checked let's uncheck them all\n      if (newitems.length === 0) {\n        listcheck = false;\n        items.forEach(item => {\n          newitems.push( item.mergeDeep({checked:false}) );\n        }, this);\n      }\n      let listOfShoppingListItems = this.props.shoppingListFactory.newListOfShoppingListItems(newitems);\n      return this.props.shoppingListRepository.putItemsBulk(listOfShoppingListItems);\n    }).then(newitemsresponse => {\n      return this.props.shoppingListRepository.get(listid);\n    }).then(shoppingList => {\n      shoppingList = shoppingList.set(\"checked\", listcheck);\n      return this.props.shoppingListRepository.put(shoppingList);\n    }).then(shoppingList => {\n      this.getShoppingLists();\n    });\n  }\n\n  /**\n   * Delete a shopping list\n   * @param {string} listid id of a shopping list\n   */\n  deleteShoppingList = (listid) => {\n    this.props.shoppingListRepository.get(listid).then(shoppingList => {\n      shoppingList = shoppingList.set(\"_deleted\", true);\n      return this.props.shoppingListRepository.put(shoppingList);\n    }).then(result => {\n      this.getShoppingLists();\n    });\n  }\n\n  /**\n   * Change the name of a shopping list\n   * @param {string} listid id of a shopping list\n   * @param {string} newname new name of the list\n   */\n  renameShoppingList = (listid, newname) => {\n    this.props.shoppingListRepository.get(listid).then(shoppingList => {\n      shoppingList = shoppingList.set('title', newname);\n      return this.props.shoppingListRepository.put(shoppingList);\n    }).then(this.getShoppingLists);\n  }\n\n  /**\n   * Create a new shopping list or item based on where the event came from\n   * @param {event} evt The click event on the UI element requesting to the action. Get the name from state and decide whether to add a list or an item based on the `state.view` \n   */\n  createNewShoppingListOrItem = (e) => {\n    e.preventDefault();\n    this.setState({adding: false});\n    \n    if (this.state.view === 'lists') {\n      let shoppingList = this.props.shoppingListFactory.newShoppingList({\n        title: this.state.newName\n      });\n      this.props.shoppingListRepository.put(shoppingList).then(this.getShoppingLists);\n\n    } else if (this.state.view === 'items') {\n      let item = this.props.shoppingListFactory.newShoppingListItem({\n        title: this.state.newName\n      }, this.state.shoppingList);\n      this.props.shoppingListRepository.putItem(item).then(item => {\n        this.getShoppingListItems(this.state.shoppingList._id).then(items => {\n          this.setState({\n            view: 'items', \n            shoppingListItems: items\n          });\n        });\n      });\n    }\n  }\n\n  /**\n   * Set the new name the user has typed in state for pickup later by other functions\n   * @param {event} evt The change event on the UI element that let's user type a name\n   */\n  updateName = (evt) => {\n    this.setState({newName: evt.target.value});\n  }\n\n  /**\n   * Tell the component we're in adding list or item mode\n   */\n  displayAddingUI = () => {\n    this.setState({adding: true});\n  }\n\n  /**\n   * Show UI for typing in a new name\n   */\n  renderNewNameUI = () => {\n    return (\n      <form onSubmit={this.createNewShoppingListOrItem} style={{marginTop:'12px'}}>\n          <Paper>\n            <TextField className=\"form-control\" type=\"text\" \n              autoFocus={true} \n              hintText=\"Name...\" \n              onChange={this.updateName} \n              fullWidth={false} \n              style={{padding:'0px 12px',width:'calc(100% - 24px)'}}\n              underlineStyle={{width:'calc(100% - 24px)'}}/>\n          </Paper>\n      </form>\n    );\n  }\n\n  /**\n   * Show UI for shopping lists\n   */\n  renderShoppingLists = () => {\n    if (this.state.shoppingLists.length < 1) \n      return ( <Card style={{margin:\"12px 0\"}}><CardTitle title={NOLISTMSG} /></Card> );\n    return (\n      <ShoppingLists \n        shoppingLists={this.state.shoppingLists} \n        openListFunc={this.openShoppingList} \n        deleteListFunc={this.deleteShoppingList} \n        renameListFunc={this.renameShoppingList} \n        checkAllFunc={this.checkAllListItems} \n        totalCounts={this.state.totalShoppingListItemCount}\n        checkedCounts={this.state.checkedTotalShoppingListItemCount} /> \n    )\n  }\n\n  /**\n   * Show UI for shopping list items\n   */\n  renderShoppingListItems = () => {\n    if (this.state.shoppingListItems.size < 1) \n      return ( <Card style={{margin:\"12px 0\"}}><CardTitle title={NOITEMSMSG} /></Card> );\n    return (\n      <ShoppingList \n        shoppingListItems={this.state.shoppingListItems} \n        deleteFunc={this.deleteShoppingListItem} \n        toggleItemCheckFunc={this.toggleItemCheck} \n        renameItemFunc={this.renameShoppingListItem} /> \n    )\n  }\n\n  /**\n   * If we're showing items from a shopping list, show a back button.  \n   * If we're showing shopping lists, show a settings button.\n   */\n  renderBackButton = () => {\n    if (this.state.view === 'items') \n      return (<IconButton touch={true} onClick={this.getShoppingLists}><KeyboardBackspace /></IconButton>)\n    else \n      return (<img src=\"cart_sm.png\" width=\"48px\" alt=\"Shopping List app logo\" />)\n  }\n\n  renderActionButtons = () => {\n    const iconStyle = {\n      fill: 'white'\n    };\n    return (\n      <div>\n      <IconButton touch={true} onClick={this.handleOpenSettings} iconStyle={iconStyle}><SettingsIcon /></IconButton>\n      <IconButton touch={true} onClick={this.handleOpenAbout} iconStyle={iconStyle}><AboutIcon /></IconButton>\n      </div>\n    );\n  }\n\n  /**\n   * Tell component we want to show settings dialog\n   */\n  handleOpenSettings = () => {\n    this.setState({settingsOpen: true});\n  }\n\n  /**\n   * Tell component we want to hide settings dialog\n   */\n  handleCloseSettings = () => {\n    this.setState({settingsOpen: false});\n  }\n\n  /**\n   * Tell component we want to show about dialog\n   */\n  handleOpenAbout = () => {\n    this.setState({aboutOpen: true});\n  }\n\n  /**\n   * Tell component we want to hide about dialog\n   */\n  handleCloseAbout = () => {\n    this.setState({aboutOpen: false});\n  }\n\n  /**\n   * Right now the only setting is changing the remote DB, so do that then close the dialog\n   */\n  handleSubmitSettings = () => {\n    try {\n      this.remoteDB = new PouchDB(this.tempdburl);\n      this.syncToRemote();\n    }\n    catch (ex) {\n      console.log('Error setting remote database: ');\n      console.log(ex);\n    }\n    this.handleCloseSettings();\n  }\n\n  /**\n   * Show settings dialog UI\n   */\n  showSettingsDialog = () => {\n    const actions = [\n        <FlatButton label=\"Cancel\" primary={false} keyboardFocused={true} onClick={this.handleCloseSettings} />,\n        <FlatButton label=\"Submit\" primary={true} onClick={this.handleSubmitSettings} />,\n    ];\n\n    return (\n      <Dialog \n        title=\"Shopping List Settings\" \n        actions={actions} \n        modal={false} \n        open={this.state.settingsOpen} \n        onRequestClose={this.handleCloseSettings}\n      >\n      <p>Enter a fully qualified URL (including username and password) to a remote IBM Cloudant, Apache CouchDB, or PouchDB database to sync your shopping list.</p>\n      <TextField id=\"db-url\" \n        floatingLabelText=\"https://username:password@localhost:5984/database\" \n        fullWidth={true} \n        onChange={ e => {this.tempdburl = e.target.value} } />\n      </Dialog>\n    )\n  }\n\n  /**\n   * Show about dialog UI\n   */\n  showAboutDialog = () => {\n    const actions = [\n        <FlatButton label=\"Close\" primary={false} keyboardFocused={true} onClick={this.handleCloseAbout} />\n    ];\n\n    return (\n      <Dialog \n        title=\"About\" \n        actions={actions} \n        modal={false} \n        open={this.state.aboutOpen} \n        onRequestClose={this.handleAboutSettings}\n      >\n      <p>\n        <a href=\"https://github.com/ibm-watson-data-lab/shopping-list\" target=\"_blank\" rel=\"noopener noreferrer\">Shopping List is a series of Offline First demo apps, each built using a different stack.</a>\n          These demo apps cover Progressive Web Apps, hybrid mobile apps, native mobile apps, and desktop apps. This particular demo app is a <strong>Progressive Web App</strong>\n          built using <strong>React and PouchDB</strong>. <a href=\"https://github.com/ibm-watson-data-lab/shopping-list-react-pouchdb\" target=\"_blank\" rel=\"noopener noreferrer\">Get the source code</a>.\n      </p>\n      </Dialog>\n    )\n  }\n\n  /**\n   * Show the UI\n   */\n  render() {\n    let screenname = \"Shopping List\";\n    if (this.state.view === 'items') screenname = this.state.shoppingList.title;\n    return (\n      <MuiThemeProvider muiTheme={muiTheme}>\n      <div className=\"App\">\n        <AppBar title={screenname} \n                iconElementLeft={this.renderBackButton()}\n                style={appBarStyle} \n                iconElementRight={this.renderActionButtons()} />\n        <div className={'listsanditems'} style={{margin:'8px'}}>\n          {this.state.adding ? this.renderNewNameUI() : <span/>}\n          {this.state.view === 'lists' ? this.renderShoppingLists() : this.renderShoppingListItems()}\n        </div>\n        {this.state.settingsOpen ? this.showSettingsDialog() : <span/>}\n        {this.state.aboutOpen ? this.showAboutDialog() : <span/>}\n        <FloatingActionButton \n          onClick={this.displayAddingUI} \n          mini={true}\n          style={{position: 'fixed', bottom:'25px', right:'25px'}}>\n          <ContentAdd />\n        </FloatingActionButton>\n      </div>\n      </MuiThemeProvider>\n    )\n  }\n}\n\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export default function register() {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (!isLocalhost) {\n          // Is not local host. Just register service worker\n          registerValidSW(swUrl);\n        } else {\n          // This is running on localhost. Lets check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a \"New content is\n                // available; please refresh.\" message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        if (\n          response.status === 404 ||\n          response.headers.get('content-type').indexOf('javascript') === -1\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    }\n  }\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport registerServiceWorker from './registerServiceWorker';\nimport { ShoppingListFactory, ShoppingListRepositoryPouchDB } from 'ibm-shopping-list-model';\nimport PouchDB from 'pouchdb';\nimport PouchDBFind from 'pouchdb-find';\n\nPouchDB.plugin(PouchDBFind); // install the pouchdb-find plugin\nconst localDB = new PouchDB('shopping_list_react');\nlet remoteDB = undefined;\n// try to get remote database credentials from a file (use secret.js.template as an example)\n// user can alternatively enter this connection string in the app by clicking the settings gear icon\ntry {\n  let Credentials = require('./secret');\n  if (Credentials.default.cloudant_url) {\n    remoteDB = new PouchDB(Credentials.default.cloudant_url);\n  }\n}\ncatch (ex) {\n  console.log('secret.js file missing; disabling remote sync.')\n}\n// these are framework-independent interfaces for working with lists and items in the list\nconst shoppingListFactory = new ShoppingListFactory();\nconst shoppingListRepository = new ShoppingListRepositoryPouchDB(localDB);\n\n// key offline-first step - more info at https://developers.google.com/web/fundamentals/primers/service-workers/\nregisterServiceWorker(); \n// create the app with access to the helper interfaces, the local database store (PouchDB), and the remote one\nshoppingListRepository.ensureIndexes().then((response) => {\n    ReactDOM.render(<App shoppingListFactory={shoppingListFactory} shoppingListRepository={shoppingListRepository} localDB={localDB} remoteDB={remoteDB} />, document.getElementById('root'));\n}).catch( reason => {\n    console.log(\"in put catch\");\n    console.log(reason) \n});"],"sourceRoot":""}